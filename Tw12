TERMWORK 1 (Pipes)
#include<unistd.h>
#include<stdio.h>
#include<sys/types.h>
#include<sys/wait.h>
int main()
{
int fd[2]; char buffer[100];
pipe(fd);
pid_t p = fork();
if(p > 0)
{
printf("Parent PID : %d\n", getpid());
printf("Child PID : %d\n", p);
printf("[+]Passing \'Hello\' to child.\n\n");
write(fd[1], "Hello", 5);
}
else
{
printf("Child PID : %d\n", getpid());
printf("Parent PID : %d\n", getppid());
int n = read(fd[0], buffer, 100);
printf("Child received the following data : %s\n", buffer);
}
}
TERMWORK 1 (Queues)
Sending:
#include<sys/ipc.h>
#include<sys/msg.h>
#include<stdio.h>
#include<stdlib.h>
#define MAX 10
struct message{
long type;
char text[MAX];
}msg;
int main()
{
key_t key = ftok("progfile", 65);
int qid = msgget(key, 0666 | IPC_CREAT);
msg.type = 1;
printf("Enter the data to be written : ");
fgets(msg.text, MAX, stdin);
msgsnd(qid, &msg, sizeof(msg), 0);
printf("Data sent is : %s \n", msg.text);
}
Receiving:
#include<sys/ipc.h>
#include<sys/msg.h>
#include<stdio.h>
#include<stdlib.h>
#define MAX 10
struct message{
long type;
char text[MAX];
}msg;
int main()
{
key_t key=ftok("progfile", 65);
int qid = msgget(key, 0666|IPC_CREAT);
msgrcv(qid, &msg, sizeof(msg),1,0);
printf("Data Received is : %s \n",msg.text);
msgctl(qid, IPC_RMID, NULL);
}
TERMWORK 2
Server
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#define PORT 4444
void main(){
 struct sockaddr_in server, client;
 socklen_t clilen = sizeof(client);
 char buffer[1024];
 int listenfd = socket(AF_INET, SOCK_STREAM, 0);
 printf("[+]Server socket created successfully.\n");

 bzero(&server, sizeof(server));
 server.sin_family = AF_INET;
 server.sin_port = htons(PORT);
 server.sin_addr.s_addr = htonl(INADDR_ANY);

 bind(listenfd, (struct sockaddr*)&server, sizeof(server));
 printf("[+]Socket bound to port number %d.\n", PORT);
 listen(listenfd, 5);
 printf("[+]Listening...\n");
 int connfd = accept(listenfd, (struct sockaddr*)&client, &clilen);
 printf("[+]Connection established.\n");
 strcpy(buffer, "Hello");
 send(connfd, buffer, strlen(buffer), 0);
 printf("[+]\'%s\' has been transmitted.\n", buffer);
 printf("[+]Closing the connection.\n");
}
Client
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#define PORT 4444
void main(){
 int client = socket(AF_INET, SOCK_STREAM, 0);
 char buffer[1024];
 struct sockaddr_in server;
 printf("[+]Client Socket Created Successfully.\n");
 bzero(&server, sizeof(server));
 server.sin_family = AF_INET;
 server.sin_port = htons(PORT);
 server.sin_addr.s_addr = htonl(INADDR_ANY);
 connect(client, (struct sockaddr*)&server, sizeof(server));
 printf("[+]Connected to Server.\n");
 recv(client, buffer, 1024, 0);
 printf("[+]Data Received from Server : %s\n", buffer);
 printf("[+]Closing the connection.\n");
}
